import { describe, expect, test } from "vitest";
import { adapters } from "#test/adapters.js";
import { createDataModelFromSql } from "#test/createDataModelFromSql.js";
import { SnapletError } from "../utils.js";
import {
  computeAliases,
  getAliasedDataModel,
  standardInflection,
} from "./aliases.js";
import { type DataModel } from "./types.js";

const adapter = adapters.postgres;

describe("aliases", () => {
  test("it correctly computes aliases", () => {
    // arrange
    const dataModel: DataModel = {
      dialect: "postgres",
      models: {
        Comment: {
          uniqueConstraints: [],
          schemaName: "public",
          id: "public.Comment",
          tableName: "Comment",
          fields: [
            {
              id: "public.Comment.content",
              name: "content",
              columnName: "content",
              type: "text",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Comment.created_at",
              name: "created_at",
              columnName: "created_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.Comment.id",
              name: "id",
              columnName: "id",
              type: "int4",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: true,
            },
            {
              id: "public.Comment.post_id",
              name: "post_id",
              columnName: "post_id",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Comment.updated_at",
              name: "updated_at",
              columnName: "updated_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Comment.user_id",
              name: "user_id",
              columnName: "user_id",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              name: "Post",
              type: "Post",
              isRequired: false,
              kind: "object",
              relationName: "CommentToPost",
              relationFromFields: ["post_id"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "User",
              type: "User",
              isRequired: false,
              kind: "object",
              relationName: "CommentToUser",
              relationFromFields: ["user_id"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
          ],
        },
        Post: {
          uniqueConstraints: [],
          schemaName: "public",
          id: "public.Post",
          tableName: "Post",
          fields: [
            {
              id: "public.Post.author_id",
              name: "author_id",
              columnName: "author_id",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.content",
              name: "content",
              columnName: "content",
              type: "text",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.created_at",
              name: "created_at",
              columnName: "created_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.Post.id",
              name: "id",
              columnName: "id",
              type: "int4",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: true,
            },
            {
              id: "public.Post.is_published",
              name: "is_published",
              columnName: "is_published",
              type: "bool",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.Post.title",
              name: "title",
              columnName: "title",
              type: "varchar",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.updated_at",
              name: "updated_at",
              columnName: "updated_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.validated_by",
              name: "validated_by",
              columnName: "validated_by",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              name: "User_Post_author_idToUser",
              type: "User",
              isRequired: false,
              kind: "object",
              relationName: "Post_author_idToUser",
              relationFromFields: ["author_id"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "User_Post_validated_byToUser",
              type: "User",
              isRequired: false,
              kind: "object",
              relationName: "Post_validated_byToUser",
              relationFromFields: ["validated_by"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "Comment",
              type: "Comment",
              isRequired: false,
              kind: "object",
              relationName: "CommentToPost",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
          ],
        },
        User: {
          uniqueConstraints: [],
          schemaName: "public",
          id: "public.User",
          tableName: "User",
          fields: [
            {
              id: "public.User.created_at",
              name: "created_at",
              columnName: "created_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.User.email",
              name: "email",
              columnName: "email",
              type: "varchar",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.User.id",
              name: "id",
              columnName: "id",
              type: "int4",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: true,
            },
            {
              id: "public.User.username",
              name: "username",
              columnName: "username",
              type: "varchar",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              name: "Comment",
              type: "Comment",
              isRequired: false,
              kind: "object",
              relationName: "CommentToUser",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "Post_Post_author_idToUser",
              type: "Post",
              isRequired: false,
              kind: "object",
              relationName: "Post_author_idToUser",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "Post_Post_validated_byToUser",
              type: "Post",
              isRequired: false,
              kind: "object",
              relationName: "Post_validated_byToUser",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
          ],
        },
      },
      enums: {},
    };
    // act
    const aliases = computeAliases(dataModel, standardInflection);
    // assert
    expect(aliases).toMatchObject({
      Comment: {
        fields: {
          Post: "post",
          User: "user",
          content: "content",
          created_at: "createdAt",
          id: "id",
          post_id: "postId",
          updated_at: "updatedAt",
          user_id: "userId",
        },
        name: "comments",
      },
      Post: {
        fields: {
          Comment: "comments",
          User_Post_author_idToUser: "author",
          User_Post_validated_byToUser: "userByValidatedBy",
          author_id: "authorId",
          content: "content",
          created_at: "createdAt",
          id: "id",
          is_published: "isPublished",
          title: "title",
          updated_at: "updatedAt",
          validated_by: "validatedBy",
        },
        name: "posts",
      },
      User: {
        fields: {
          Comment: "comments",
          Post_Post_author_idToUser: "authoredPosts",
          Post_Post_validated_byToUser: "validatedPosts",
          created_at: "createdAt",
          email: "email",
          id: "id",
          username: "username",
        },
        name: "users",
      },
    });
  });

  test("it correctly applies aliases", () => {
    // arrange
    const dataModel: DataModel = {
      dialect: "postgres",
      models: {
        Comment: {
          uniqueConstraints: [],
          schemaName: "public",
          id: "public.Comment",
          tableName: "Comment",
          fields: [
            {
              id: "public.Comment.content",
              name: "content",
              columnName: "content",
              type: "text",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Comment.created_at",
              name: "created_at",
              columnName: "created_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.Comment.id",
              name: "id",
              columnName: "id",
              type: "int4",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: true,
            },
            {
              id: "public.Comment.post_id",
              name: "post_id",
              columnName: "post_id",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Comment.updated_at",
              name: "updated_at",
              columnName: "updated_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Comment.user_id",
              name: "user_id",
              columnName: "user_id",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              name: "Post",
              type: "Post",
              isRequired: false,
              kind: "object",
              relationName: "CommentToPost",
              relationFromFields: ["post_id"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "User",
              type: "User",
              isRequired: false,
              kind: "object",
              relationName: "CommentToUser",
              relationFromFields: ["user_id"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
          ],
        },
        Post: {
          uniqueConstraints: [],
          schemaName: "public",
          id: "public.Post",
          tableName: "Post",
          fields: [
            {
              id: "public.Post.author_id",
              name: "author_id",
              columnName: "author_id",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.content",
              name: "content",
              columnName: "content",
              type: "text",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.created_at",
              name: "created_at",
              columnName: "created_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.Post.id",
              name: "id",
              columnName: "id",
              type: "int4",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: true,
            },
            {
              id: "public.Post.is_published",
              name: "is_published",
              columnName: "is_published",
              type: "bool",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.Post.title",
              name: "title",
              columnName: "title",
              type: "varchar",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.updated_at",
              name: "updated_at",
              columnName: "updated_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.Post.validated_by",
              name: "validated_by",
              columnName: "validated_by",
              type: "int4",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              name: "User_Post_author_idToUser",
              type: "User",
              isRequired: false,
              kind: "object",
              relationName: "Post_author_idToUser",
              relationFromFields: ["author_id"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "User_Post_validated_byToUser",
              type: "User",
              isRequired: false,
              kind: "object",
              relationName: "Post_validated_byToUser",
              relationFromFields: ["validated_by"],
              relationToFields: ["id"],
              isList: false,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "Comment",
              type: "Comment",
              isRequired: false,
              kind: "object",
              relationName: "CommentToPost",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
          ],
        },
        User: {
          uniqueConstraints: [],
          schemaName: "public",
          id: "public.User",
          tableName: "User",
          fields: [
            {
              id: "public.User.created_at",
              name: "created_at",
              columnName: "created_at",
              type: "timestamp",
              isRequired: false,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: false,
            },
            {
              id: "public.User.email",
              name: "email",
              columnName: "email",
              type: "varchar",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              id: "public.User.id",
              name: "id",
              columnName: "id",
              type: "int4",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: true,
              isId: true,
            },
            {
              id: "public.User.username",
              name: "username",
              columnName: "username",
              type: "varchar",
              isRequired: true,
              kind: "scalar",
              isList: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
              isId: false,
            },
            {
              name: "Comment",

              type: "Comment",
              isRequired: false,
              kind: "object",
              relationName: "CommentToUser",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "Post_Post_author_idToUser",

              type: "Post",
              isRequired: false,
              kind: "object",
              relationName: "Post_author_idToUser",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
            {
              name: "Post_Post_validated_byToUser",

              type: "Post",
              isRequired: false,
              kind: "object",
              relationName: "Post_validated_byToUser",
              relationFromFields: [],
              relationToFields: [],
              isList: true,
              isId: false,
              isGenerated: false,
              sequence: false,
              hasDefaultValue: false,
            },
          ],
        },
      },
      enums: {},
    };
    // act
    const aliasedDataModel = getAliasedDataModel(dataModel, {
      inflection: true,
    });
    // assert
    expect(aliasedDataModel).toMatchObject({
      enums: {},
      models: {
        comments: {
          fields: [
            {
              columnName: "content",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "content",
              type: "text",
            },
            {
              columnName: "created_at",
              hasDefaultValue: true,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "createdAt",
              type: "timestamp",
            },
            {
              columnName: "id",
              hasDefaultValue: true,
              isGenerated: false,
              isId: true,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "id",
              type: "int4",
            },
            {
              columnName: "post_id",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "postId",
              type: "int4",
            },
            {
              columnName: "updated_at",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "updatedAt",
              type: "timestamp",
            },
            {
              columnName: "user_id",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "userId",
              type: "int4",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "post",
              relationFromFields: ["postId"],
              relationName: "CommentToPost",
              relationToFields: ["id"],
              type: "posts",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "user",
              relationFromFields: ["userId"],
              relationName: "CommentToUser",
              relationToFields: ["id"],
              type: "users",
            },
          ],
          uniqueConstraints: [],
          schemaName: "public",
          tableName: "Comment",
        },
        posts: {
          fields: [
            {
              columnName: "author_id",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "authorId",
              type: "int4",
            },
            {
              columnName: "content",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "content",
              type: "text",
            },
            {
              columnName: "created_at",
              hasDefaultValue: true,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "createdAt",
              type: "timestamp",
            },
            {
              columnName: "id",
              hasDefaultValue: true,
              isGenerated: false,
              isId: true,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "id",
              type: "int4",
            },
            {
              columnName: "is_published",
              hasDefaultValue: true,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "isPublished",
              type: "bool",
            },
            {
              columnName: "title",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "title",
              type: "varchar",
            },
            {
              columnName: "updated_at",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "updatedAt",
              type: "timestamp",
            },
            {
              columnName: "validated_by",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "validatedBy",
              type: "int4",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "author",
              relationFromFields: ["authorId"],
              relationName: "Post_author_idToUser",
              relationToFields: ["id"],
              type: "users",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "userByValidatedBy",
              relationFromFields: ["validatedBy"],
              relationName: "Post_validated_byToUser",
              relationToFields: ["id"],
              type: "users",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: true,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "comments",
              relationFromFields: [],
              relationName: "CommentToPost",
              relationToFields: [],
              type: "comments",
            },
          ],
          uniqueConstraints: [],
          schemaName: "public",
          tableName: "Post",
        },
        users: {
          fields: [
            {
              columnName: "created_at",
              hasDefaultValue: true,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: false,
              sequence: false,
              kind: "scalar",
              name: "createdAt",
              type: "timestamp",
            },
            {
              columnName: "email",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "email",
              type: "varchar",
            },
            {
              columnName: "id",
              hasDefaultValue: true,
              isGenerated: false,
              isId: true,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "id",
              type: "int4",
            },
            {
              columnName: "username",
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: false,
              isRequired: true,
              sequence: false,
              kind: "scalar",
              name: "username",
              type: "varchar",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: true,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "comments",
              relationFromFields: [],
              relationName: "CommentToUser",
              relationToFields: [],
              type: "comments",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: true,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "authoredPosts",
              relationFromFields: [],
              relationName: "Post_author_idToUser",
              relationToFields: [],
              type: "posts",
            },
            {
              hasDefaultValue: false,
              isGenerated: false,
              isId: false,
              isList: true,
              isRequired: false,
              sequence: false,
              kind: "object",
              name: "validatedPosts",
              relationFromFields: [],
              relationName: "Post_validated_byToUser",
              relationToFields: [],
              type: "posts",
            },
          ],
          uniqueConstraints: [],
          schemaName: "public",
          tableName: "User",
        },
      },
    });
  });

  test("accounts for model name conflicts across schemas that surface only after inflection has been applied", async () => {
    const dataModel = await createDataModelFromSql(
      adapter,
      `
      CREATE TABLE public."user" (
        "user_id" SERIAL PRIMARY KEY
      );

      CREATE SCHEMA "auth";

      CREATE TABLE auth."users" (
        "user_id" SERIAL PRIMARY KEY
      );
    `,
    );

    const aliases = computeAliases(dataModel, standardInflection);
    expect(aliases["user"].name).toEqual("publicUsers");
    expect(aliases["users"].name).toEqual("authUsers");
  });

  test("throws for unsolvable model name conflicts that surface only after inflection has been applied", async () => {
    const dataModel = await createDataModelFromSql(
      adapter,
      `
      CREATE TABLE public."user" (
        "user_id" SERIAL PRIMARY KEY
      );

      CREATE TABLE public."users" (
        "user_id" SERIAL PRIMARY KEY
      );
    `,
    );

    expect(() => computeAliases(dataModel, standardInflection)).toThrow(
      new SnapletError("SEED_ALIAS_MODEL_NAME_CONFLICTS", {
        conflicts: [
          {
            aliasName: "users",
            models: new Map([
              ["user", dataModel.models["user"]],
              ["usrs", dataModel.models["users"]],
            ]),
          },
        ],
      }),
    );
  });

  test("accounts for model name overrides", async () => {
    const dataModel = await createDataModelFromSql(
      adapter,
      `
      CREATE TABLE public."user" (
        "user_id" SERIAL PRIMARY KEY
      );

      CREATE TABLE public."users" (
        "user_id" SERIAL PRIMARY KEY
      );
    `,
    );

    expect(
      computeAliases(dataModel, standardInflection, {
        user: {
          name: "a",
        },
        users: {
          name: "b",
        },
      }),
    ).toEqual({
      user: {
        fields: {
          user_id: "userId",
        },
        name: "a",
      },
      users: {
        fields: {
          user_id: "userId",
        },
        name: "b",
      },
    });
  });

  test("accounts for field name overrides", async () => {
    const dataModel = await createDataModelFromSql(
      adapter,
      `
      CREATE TABLE public."user" (
        "user_id" SERIAL PRIMARY KEY
      );
    `,
    );

    expect(
      computeAliases(dataModel, standardInflection, {
        user: {
          fields: {
            user_id: "id",
          },
        },
      }),
    ).toEqual({
      user: {
        name: "users",
        fields: {
          user_id: "id",
        },
      },
    });
  });

  test("does not throw for unsolvable model name conflicts if an override was given", async () => {
    const dataModel = await createDataModelFromSql(
      adapter,
      `
      CREATE TABLE public."user" (
        "user_id" SERIAL PRIMARY KEY
      );

      CREATE TABLE public."users" (
        "user_id" SERIAL PRIMARY KEY
      );
    `,
    );

    expect(() =>
      computeAliases(dataModel, standardInflection, {
        user: {
          name: "user",
        },
        users: {
          name: "users",
        },
      }),
    ).not.toThrow();
  });

  test("inflection is not applied if no alias configuration is provided", async () => {
    // arrange
    const dataModel = await createDataModelFromSql(
      adapter,
      `
      CREATE TABLE public."User_Test" (
        "user_id" SERIAL PRIMARY KEY
      );
    `,
    );
    // act
    const aliasedDataModel = getAliasedDataModel(dataModel);
    // assert
    expect(aliasedDataModel).toEqual(dataModel);
  });
});
